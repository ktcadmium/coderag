version: "3"

vars:
  BINARY_NAME: coderag-mcp
  RELEASE_DIR: target/release

env:
  HF_HUB_USER_AGENT_ORIGIN: "CodeRAG/0.1.0"

tasks:
  build:
    desc: Build the project
    cmds:
      - cargo build

  release:
    desc: Build release binary
    cmds:
      - cargo build --release --bin {{.BINARY_NAME}}

  clean:
    desc: Clean build artifacts
    cmds:
      - cargo clean

  test:
    desc: Run all tests
    cmds:
      - cargo test

  fmt:
    desc: Format code
    cmds:
      - cargo fmt

  lint:
    desc: Run clippy linter
    cmds:
      - cargo clippy -- -D warnings

  crawl-test:
    desc: Test crawling functionality
    cmds:
      - cargo run --bin {{.BINARY_NAME}} -- crawl https://httpbin.org --verbose

  quick:
    desc: Quick development check
    cmds:
      - cargo fmt
      - cargo clippy -- -D warnings
      - cargo build

  pre-commit:
    desc: Full pre-commit checks
    cmds:
      - task: fmt
      - task: lint
      - task: test
      - task: build

  release-all:
    desc: Build releases for all platforms
    cmds:
      - task: release-linux-amd64
      - task: release-linux-arm64
      - task: release-macos-amd64
      - task: release-macos-arm64
      - task: release-windows-amd64

  release-linux-amd64:
    desc: Build Linux AMD64 release
    cmds:
      - cargo build --release --bin {{.BINARY_NAME}} --target x86_64-unknown-linux-gnu
      - cp target/x86_64-unknown-linux-gnu/release/{{.BINARY_NAME}} ./{{.BINARY_NAME}}-linux-amd64

  release-linux-arm64:
    desc: Build Linux ARM64 release
    cmds:
      - cargo build --release --bin {{.BINARY_NAME}} --target aarch64-unknown-linux-gnu
      - cp target/aarch64-unknown-linux-gnu/release/{{.BINARY_NAME}} ./{{.BINARY_NAME}}-linux-arm64

  release-macos-amd64:
    desc: Build macOS AMD64 release
    cmds:
      - cargo build --release --bin {{.BINARY_NAME}} --target x86_64-apple-darwin
      - cp target/x86_64-apple-darwin/release/{{.BINARY_NAME}} ./{{.BINARY_NAME}}-macos-amd64

  release-macos-arm64:
    desc: Build macOS ARM64 release
    cmds:
      - cargo build --release --bin {{.BINARY_NAME}} --target aarch64-apple-darwin
      - cp target/aarch64-apple-darwin/release/{{.BINARY_NAME}} ./{{.BINARY_NAME}}-macos-arm64

  release-macos-universal:
    desc: Build macOS universal binary
    cmds:
      - cargo build --release --bin {{.BINARY_NAME}} --target x86_64-apple-darwin
      - cargo build --release --bin {{.BINARY_NAME}} --target aarch64-apple-darwin
      - lipo -create -output {{.BINARY_NAME}}-macos-universal target/x86_64-apple-darwin/release/{{.BINARY_NAME}} target/aarch64-apple-darwin/release/{{.BINARY_NAME}}

  release-windows-amd64:
    desc: Build Windows AMD64 release
    cmds:
      - cargo build --release --bin {{.BINARY_NAME}} --target x86_64-pc-windows-msvc
      - cp target/x86_64-pc-windows-msvc/release/{{.BINARY_NAME}}.exe ./{{.BINARY_NAME}}-windows-amd64.exe

  install-targets:
    desc: Install all cross-compilation targets
    cmds:
      - rustup target add x86_64-unknown-linux-gnu
      - rustup target add aarch64-unknown-linux-gnu
      - rustup target add x86_64-apple-darwin
      - rustup target add aarch64-apple-darwin
      - rustup target add x86_64-pc-windows-msvc
      - rustup target add aarch64-pc-windows-msvc

  default:
    desc: Default task
    cmds:
      - task: quick
